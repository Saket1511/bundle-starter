/* eslint-disable no-console */
/** *
 *  Exclude Promotions Integration Tests
 *  Automate creation of carts that trigger the ensemble discounts,
 *  and verify the cart's applied discounts.
 *  Set env vars for the ct client then 'yarn integration-test' to run.
 ** */
import {
  Types as IntegrationTestTypes,
  ProductDiscounts,
  ProductTypes,
  Products,
  Customers,
  CustomerGroups,
  TaxCategories,
  ShippingMethods,
  ShippingZones,
} from './shared-fixtures';
import * as Types from '../../types';
import {
  ensureResourcesExist,
  deleteResources,
  deleteKnownResources,
  createCTClient,
  deleteResourcesWhere,
} from './test-utils';

const SETUP_TIMEOUT = 30000;
const TEARDOWN_TIMEOUT = 30000;

/**
 * Global before() hook to setup project for integration tests
 */
// eslint-disable-next-line no-undef
before('Integration test setup suite', async function () {
  this.timeout(SETUP_TIMEOUT);
  console.info('Beginning setup prior to test suites running...');
  // setup project by creating ctp client and adding to global scope
  const ct = createCTClient();
  global.ct = ct;
  console.debug(
    `commercetools client created, ensuring custom types exist on project ${ct.projectKey}`,
  );
  global.ctresources = {
    orders: {},
    carts: {},
    cartDiscounts: {},
    discountCodes: {},
    payments: {},
  };

  // adding custom types to project
  await ensureResourcesExist(Object.values(Types), 'types');
  global.ctresources.integrationTypes = await ensureResourcesExist(
    Object.values(IntegrationTestTypes),
    'types',
  );
  console.debug(
    `Types created, ensuring tax categories exist on project ${ct.projectKey}`,
  );
  await ensureResourcesExist(Object.values(TaxCategories), 'taxCategories');
  console.debug(
    `Tax categories created, ensuring shipping zones exist on project ${ct.projectKey}`,
  );
  await ensureResourcesExist(Object.values(ShippingZones), 'zones');
  console.debug(
    `Shipping zones created, ensuring shipping methods exist on project ${ct.projectKey}`,
  );
  await ensureResourcesExist(Object.values(ShippingMethods), 'shippingMethods');
  console.debug(
    `Shipping methods created, ensuring customer groups exist on project ${ct.projectKey}`,
  );
  await ensureResourcesExist(Object.values(CustomerGroups), 'customerGroups');
  console.debug(
    `Customer groups created, ensuring customers exist on project ${ct.projectKey}`,
  );
  await ensureResourcesExist(Object.values(Customers), 'customers');
  console.debug('Customers exist on the project, adding product types.');
  await ensureResourcesExist(Object.values(ProductTypes), 'productTypes');
  console.debug(
    'Product types exist on the project, adding product discounts.',
  );
  await ensureResourcesExist(
    Object.values(ProductDiscounts),
    'productDiscounts',
  );

  console.debug('Product discounts exist on the project, adding products.');
  await ensureResourcesExist(Object.values(Products), 'products');

  // Add tax rate (in the US)
  await ensureResourcesExist(Object.values(TaxCategories), 'taxCategories');
  // Add zone (in the US)
  await ensureResourcesExist(Object.values(ShippingZones), 'zones');
  // Add shipping method using the above tax rate and zone
  await ensureResourcesExist(Object.values(ShippingMethods), 'shippingMethods');

  // TODO: check to see subscriptions and extension set up
  console.info('Setup complete!  Test suites will now run.');
});

/**
 * Global after() hook to teardown project after integration tests
 */
// eslint-disable-next-line no-undef
after(async function () {
  this.timeout(TEARDOWN_TIMEOUT);
  console.info('Test suites finished, beginning teardown...');

  // remove all of our payments
  await deleteKnownResources('payments');
  // remove all of our orders
  await deleteKnownResources('orders');
  await deleteResourcesWhere({
    resourceTypeId: 'orders',
    where: 'custom(fields(applyCartDiscount is defined) or fields(applyCartDiscount is not defined))',
  });

  // remove all of our carts
  console.info('Removing test carts');
  await deleteKnownResources('carts');
  await deleteResourcesWhere({
    resourceTypeId: 'carts',
    where: 'custom(fields(applyCartDiscount is defined) or fields(applyCartDiscount is not defined))',
  });

  // remove all of our discount codes that didnt get cleaned during test suite teardown
  console.info('Removing test discount codes');
  await deleteKnownResources('discountCodes');
  await deleteResourcesWhere({
    resourceTypeId: 'discountCodes',
    where: 'groups contains any ("autogenerated") or (code > "discount-code-for-0" and code < "discount-code-for-z")',
  });
  await deleteResourcesWhere({
    resourceTypeId: 'discountCodes',
    where: 'groups contains any ("integration") or (code > "integration-" and code < "integration-z")',
  });

  // remove all of our cart discounts that didnt get cleaned during test suite teardown
  console.info('Removing test cart discounts');
  await deleteKnownResources('cartDiscounts');
  await deleteResourcesWhere({
    resourceTypeId: 'cartDiscounts',
    where: 'custom(fields(assignedToCart is defined)) or (key > "integration-" and key < "integration-z")',
  });

  console.info('Removing test product discounts');
  await deleteKnownResources('productDiscounts');
  // this second call is just to be sure we've cleaned up.
  await deleteResourcesWhere({
    resourceTypeId: 'productDiscounts',
    where: 'key > "integration-" and key < "integration-z"',
  });

  // remove products
  console.info('Removing test products and other test resources');
  await deleteKnownResources('products');
  await deleteKnownResources('productTypes');
  await deleteKnownResources('customers');
  await deleteKnownResources('customerGroups');
  await deleteKnownResources('shippingMethods');
  await deleteKnownResources('zones');
  await deleteKnownResources('taxCategories');

  // remove all of our custom types, but retain types in use by the project
  await deleteResources(global.ctresources.integrationTypes, 'types');

  delete global.ct;
  console.info('Teardown complete!');
});
